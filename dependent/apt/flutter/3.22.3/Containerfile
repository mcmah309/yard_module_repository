ARG flutter_ver={{ flutter_version | default (value="3.22.3") }}

## Set environment variables
ENV FLUTTER_HOME=/usr/local/flutter
ENV PATH ${PATH}:${FLUTTER_HOME}/bin:${FLUTTER_HOME}/bin/cache/dart-sdk/bin

RUN mkdir -p $FLUTTER_HOME
## Base linux config
RUN apt-get update \
    && apt-get upgrade -y \
    && apt-get install -y --no-install-recommends --no-install-suggests ca-certificates \
    && update-ca-certificates

## Install base tools required flutter tools https://docs.flutter.dev/get-started/install/linux#system-requirements
RUN apt-get install -y --no-install-recommends --no-install-suggests \
    bash \
    curl \
    file \
    git \
    # mkdir \
    # rm \
    unzip \
    # which \
    xz-utils \
    zip

## For linux desktop apps: https://docs.flutter.dev/get-started/install/linux#linux-prerequisites
RUN apt-get install -y --no-install-recommends --no-install-suggests \
    clang \
    cmake \
    git \
    ninja-build \
    pkg-config \
    libgtk-3-dev \
    liblzma-dev \
    libstdc++-12-dev

WORKDIR /tmp

## Linux downloads https://docs.flutter.dev/release/archive?tab=linux
## Download Flutter, extract it to the FLUTTER_HOME directory, and then remove the original file
RUN curl -O https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_${flutter_ver}-stable.tar.xz \
    && tar xf flutter_linux_${flutter_ver}-stable.tar.xz -C $FLUTTER_HOME --strip-components=1 \
    && rm flutter_linux_${flutter_ver}-stable.tar.xz

## `flutter config` fails without this
RUN git config --global --add safe.directory /usr/local/flutter

## Setup Flutter
RUN flutter config --enable-android \
                --enable-linux-desktop \
                --enable-web \
                --enable-ios \
                --enable-macos-desktop \
                --enable-windows-desktop 

## Pre-fetch Flutter development binaries
RUN flutter precache --universal \
    --linux \
    --web \
    --ios \
    --macos \
    --windows 

## Accept Android licenses
RUN yes | flutter doctor --android-licenses

# debugging on real device
VOLUME /dev/bus/usb

VOLUME /root/.pub-cache

## Linux
# Needed for linux, sets x11 to use the first display, use `export GDK_BACKEND=wayland` to use wayland
ENV DISPLAY=:0

### Install Chrome (Used by Flutter Web)
RUN apt-get install -y wget
RUN wget -q https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
RUN apt-get install -y ./google-chrome-stable_current_amd64.deb

## Create a google chrome executable that allows running as root. Used by flutter when lauching web apps.
RUN ORIGINAL_CHROME_PATH=$(which google-chrome) && \
    mv "$ORIGINAL_CHROME_PATH" "${ORIGINAL_CHROME_PATH}-bin" && \
    echo '#!/bin/bash\n'"${ORIGINAL_CHROME_PATH}-bin"' --no-sandbox --headless "$@"' > /usr/bin/google-chrome && \
    chmod +x /usr/bin/google-chrome

## Need for packages
# Needed by path provider find the write paths for the linux os
Run apt-get install xdg-user-dirs